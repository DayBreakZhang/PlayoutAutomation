<UserControl ResxExtension.DefaultResxName="TAS.Client.Views.EngineView" Language="{UICulture}" 
             x:Class="TAS.Client.EngineView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:vievmodels="clr-namespace:TAS.Client.ViewModels" 
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             xmlns:c="clr-namespace:TAS.Client" 
             xmlns:common="clr-namespace:TAS.Common" 
             mc:Ignorable="d" 
             d:DesignHeight="850" d:DesignWidth="1150" Focusable="True" 
             FontSize="13"
             >
    <UserControl.Resources>
        <Style x:Key="controlPanelButtons" TargetType="Button" >
            <Setter Property="Padding" Value="4" />
            <Setter Property="Width" Value="40" />
            <Setter Property="Height" Value="40" />
        </Style>
        <c:EngineStateToBrushConverter x:Key="EngineStateToBrush" />
        <Style x:Key="tvItemStyle" TargetType="TreeViewItem">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="TreeViewItem">
                        <Grid MaxWidth="{Binding Path=ActualWidth, RelativeSource={RelativeSource TemplatedParent}}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" MinWidth="19" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <ToggleButton IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press" Name="Expander">
                                <ToggleButton.Style>
                                    <Style TargetType="ToggleButton">
                                        <Setter Property="UIElement.Focusable" Value="false" />
                                        <Setter Property="FrameworkElement.Width" Value="16" />
                                        <Setter Property="FrameworkElement.Height" Value="16" />
                                        <Setter Property="Control.Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="ToggleButton">
                                                    <Border Background="#00FFFFFF" Width="16" Height="16" >
                                                        <Path Fill="#00FFFFFF" Stroke="#FF989898" Name="ExpandPath">
                                                            <Path.Data>
                                                                <PathGeometry Figures="M0,0L0,10L10,0z" />
                                                            </Path.Data>
                                                            <Path.RenderTransform>
                                                                <RotateTransform Angle="135" CenterX="5" CenterY="5"/>
                                                            </Path.RenderTransform>
                                                        </Path>
                                                    </Border>
                                                    <ControlTemplate.Triggers>
                                                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                                                            <Setter TargetName="ExpandPath" Property="Shape.Stroke" Value="#FF1BBBFA" />
                                                            <Setter TargetName="ExpandPath" Property="Shape.Fill" Value="#00FFFFFF" />
                                                        </Trigger>
                                                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                                                            <Setter TargetName="ExpandPath" Property="UIElement.RenderTransform">
                                                                <Setter.Value>
                                                                    <RotateTransform Angle="180" CenterX="5" CenterY="5" />
                                                                </Setter.Value>
                                                            </Setter>
                                                            <Setter TargetName="ExpandPath" Property="Shape.Fill" Value="#FF595959" />
                                                            <Setter TargetName="ExpandPath" Property="Shape.Stroke" Value="#FF262626" />
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </ToggleButton.Style>
                            </ToggleButton>
                            <Border x:Name="Bd" BorderThickness="{TemplateBinding Border.BorderThickness}" 
                                        BorderBrush="{TemplateBinding Border.BorderBrush}" 
                                        Padding="{TemplateBinding Control.Padding}" 
                                        Background="{TemplateBinding Panel.Background}" 
                                        SnapsToDevicePixels="True" 
                                        Grid.Column="1">
                                <ContentPresenter x:Name="PART_Header" 
                                                      Content="{TemplateBinding HeaderedContentControl.Header}" 
                                                      ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}" 
                                                      ContentStringFormat="{TemplateBinding HeaderedItemsControl.HeaderStringFormat}" 
                                                      ContentTemplateSelector="{TemplateBinding HeaderedItemsControl.HeaderTemplateSelector}" 
                                                      ContentSource="Header" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" 
                                                      />
                            </Border>
                            <ItemsPresenter x:Name="ItemsHost" Grid.Column="1" Grid.Row="1" />
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="TreeViewItem.IsExpanded" Value="False">
                                <Setter TargetName="ItemsHost" Property="UIElement.Visibility" Value="Collapsed" />
                            </Trigger>
                            <Trigger Property="ItemsControl.HasItems" Value="False">
                                <Setter TargetName="Expander" Property="UIElement.Visibility" Value="Hidden" />
                            </Trigger>
                            <Trigger Property="TreeViewItem.IsSelected" Value="True">
                                <Setter TargetName="Bd" Property="Panel.Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                                <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="TreeViewItem.IsSelected" Value="True" />
                                    <Condition Property="Selector.IsSelectionActive" Value="False" />
                                </MultiTrigger.Conditions>
                                <Setter TargetName="Bd" Property="Panel.Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                                <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                            </MultiTrigger>
                            <Trigger Property="UIElement.IsEnabled" Value="False">
                                <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>
    <UserControl.InputBindings>
        <KeyBinding Command="{Binding CommandStartSelected}" Gesture="Ctrl+F3"/>
        <KeyBinding Command="{Binding CommandStartLoaded}" Gesture="F3"/>
        <KeyBinding Command="{Binding CommandTrackingToggle}" Gesture="Scroll" />
        <KeyBinding Command="{Binding CommandClearAll}" Gesture="Shift+Pause" />
        <KeyBinding Command="{Binding CommandLoadSelected}" Gesture="F2" />
        <KeyBinding Command="{Binding CommandRescheduleSelected}" Gesture="F4" />
        <KeyBinding Command="{Binding CommandToggleHold}" Gesture="F6" />
        <KeyBinding Command="{Binding CommandToggleEnabled}" Gesture="F7" />
        <KeyBinding Command="{Binding CommandCutSingle}" Gesture="Ctrl+X" />
        <KeyBinding Command="{Binding CommandCutMultiple}" Gesture="Ctrl+Shift+X" />
        <KeyBinding Command="{Binding CommandCopySingle}" Gesture="Ctrl+C" />
        <KeyBinding Command="{Binding CommandPaste}" CommandParameter="after" Gesture="Ctrl+V" />
        <KeyBinding Command="{Binding CommandSaveEdit}" Gesture="F12" />
        <KeyBinding Command="{Binding CommandDeleteSelected}" Gesture="Ctrl+Delete" />
        <KeyBinding Command="{Binding CommandAddNextMovie}" Gesture="Ctrl+N"/>
        <KeyBinding Command="{Binding CommandAddGraphics}" CommandParameter="1" Gesture="Ctrl+1"/>
        <KeyBinding Command="{Binding CommandAddGraphics}" CommandParameter="2" Gesture="Ctrl+2"/>
        <KeyBinding Command="{Binding CommandAddGraphics}" CommandParameter="3" Gesture="Ctrl+3"/>
    </UserControl.InputBindings>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="23" />
            <RowDefinition Height="58"  />
            <RowDefinition Height="*"  />
            <RowDefinition Height="28" />
        </Grid.RowDefinitions>
        <Menu IsMainMenu="True" Grid.Row="0">
            <MenuItem Header="{Resx _menu.Show}" ItemsSource="{Binding Path=RootEventViewModel.Childrens}">
                <MenuItem.ItemContainerStyle>
                    <Style TargetType="MenuItem">
                        <Setter Property="Visibility" Value="{Binding IsVisible, Converter={StaticResource NegativeBoolToVis}}"/>
                        <Setter Property="Command" Value="{Binding CommandToggleEnabled}"/>
                    </Style>
                </MenuItem.ItemContainerStyle>
            </MenuItem>           
            <MenuItem Header="{Resx _menu.Rundown}">
                <MenuItem Header="{Resx _menu.Rundown.AddEmpty}" Command="{Binding CommandNewRootRundown}"/>
                <MenuItem Header="{Resx _menu.Rundown.AddContainer}" Command="{Binding CommandNewContainer}"/>
                <!--<MenuItem Header="_Importuj playlistę" Command="{Binding CommandImportRundown}"/>-->
                <MenuItem Header="{Resx _menu.Rundown.Restart}" Command="{Binding CommandRestartRundown}"/>
            </MenuItem>
            <MenuItem Header="{Resx _menu.Edit}">
                <MenuItem Header="{Resx _menu.Edit.Cut}">
                    <MenuItem Header="{Resx _menu.Edit.Cut.OnlyThis}" Command="{Binding CommandCutSingle}"/>
                    <MenuItem Header="{Resx _menu.Edit.Cut.FromThis}" Command="{Binding CommandCutMultiple}"/>
                </MenuItem>
                <MenuItem Header="{Resx _menu.Edit.Paste}">
                    <MenuItem Header="{Resx _menu.Edit.Paste.Before}" Command="{Binding CommandPaste}" CommandParameter="before" IsEnabled="{Binding CanPasteBefore}"/>
                    <MenuItem Header="{Resx _menu.Edit.Paste.After}" Command="{Binding CommandPaste}" CommandParameter="after" IsEnabled="{Binding CanPasteAfter}"/>
                    <MenuItem Header="{Resx _menu.Edit.Paste.Under}" Command="{Binding CommandPaste}" CommandParameter="under" IsEnabled="{Binding CanPasteUnder}"/>
                </MenuItem>
                <Separator />
                <MenuItem Header="{Resx _menu.Edit.AddNext}" >
                    <MenuItem Header="{Resx _menu.Edit.AddNext.Movie}" Command="{Binding CommandAddNewMovie}" />
                    <MenuItem Header="{Resx _menu.Edit.AddNext.Rundown}" Command="{Binding CommandAddNewRundown}" />
                    <MenuItem Header="{Resx _menu.Edit.AddNext.Live}" Command="{Binding CommandAddNewLive}" />
                </MenuItem>
                <MenuItem Header="{Resx _menu.Edit.AddUnder}">
                    <MenuItem Header="{Resx _menu.Edit.AddNext.Movie}" Command="{Binding CommandAddSubMovie}" />
                    <MenuItem Header="{Resx _menu.Edit.AddNext.Rundown}" Command="{Binding CommandAddSubRundown}" />
                    <MenuItem Header="{Resx _menu.Edit.AddNext.Live}" Command="{Binding CommandAddSubLive}" />
                </MenuItem>
                <Separator />
                <MenuItem Header="{Resx _menu.Edit.DeleteSelected}" Command="{Binding CommandDeleteSelected}" />
            </MenuItem>
            <MenuItem Header="{Resx _menu.Tools}">
                <MenuItem Header="{Resx _menu.Tools.Export}" Command="{Binding CommandExport}"/>
                <MenuItem Header="Find unlinked events" Command="{Binding CommandSearchMissingEvents}" />
                <MenuItem Header="_Debug window" Command="{Binding CommandDebugToggle}" />
                <MenuItem Header="{Resx _menu.Tools.ChannelConfig}" Command="{Binding CommandEngineSettings}"/>
                
                <!--<MenuItem Header="Playout">
                    <MenuItem Header="Wznów" Command="{Binding CommandResume}" />
                    <MenuItem Header="Wstrzymaj" Command="{Binding CommandPause}" />
                </MenuItem>-->
            </MenuItem>
        </Menu>
        <Grid Name="gToolbox" Grid.Column="2" Grid.Row="1">
            <Grid.Resources>
                <Style TargetType="Label">
                    <Setter Property="Padding" Value="0"/>
                    <Setter Property="Margin" Value="5, 0"/>
                </Style>
                <Style TargetType="TextBlock">
                    <Setter Property="Padding" Value="0"/>
                    <Setter Property="Margin" Value="5, 0"/>
                    <Setter Property="FontSize" Value="28" />
                    <Setter Property="HorizontalAlignment" Value="Left"/>
                </Style>
                <Style TargetType="Button">
                    <Setter Property="Width" Value="40"/>
                    <Setter Property="Margin" Value="8"/>
                </Style>
            </Grid.Resources>
            <Grid.RowDefinitions>
                <RowDefinition Height="19"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{Resx Key=_toolbar.clockWidth, DefaultValue='160'}"/>
                <ColumnDefinition Width="230"/>
                <ColumnDefinition Width="150"/>
                <ColumnDefinition Width="170"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="30"/>
                <ColumnDefinition Width="40"/>
            </Grid.ColumnDefinitions>
            <StackPanel Grid.Column="1" Grid.RowSpan="2" Orientation="Horizontal" FocusManager.IsFocusScope="True">
                <Button Command="{Binding CommandStartSelected}" ToolTip="{Resx _toolbar.StartSelected}">
                    <c:AutoGreyableImage Source="../Glyphs/play.png" Stretch="None" />
                </Button>
                <Button Command="{Binding CommandLoadSelected}" ToolTip="{Resx _toolbar.Load}">
                    <c:AutoGreyableImage Source="../Glyphs/pause.png" Stretch="None" />
                </Button>
                <Button Command="{Binding CommandStartLoaded}" ToolTip="{Resx _toolbar.StartLoaded}">
                    <c:AutoGreyableImage Source="../Glyphs/playpause.png" Stretch="None" />
                </Button>
                <Button Command="{Binding CommandRescheduleSelected}" ToolTip="{Resx _toolbar.Reschedule}">
                    <c:AutoGreyableImage Source="../Glyphs/undo.png" Stretch="None" />
                </Button>
                <!--<Button Command="{Binding CommandScheduleSelected}" ToolTip="Uruchom start o zadanym czasie">
                    <c:AutoGreyableImage Source="../Glyphs/timer24_h.png" Stretch="None" />
                </Button>-->
            </StackPanel>

            <Grid Grid.Column="2" Grid.RowSpan="2" >
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="75" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <ComboBox Margin="2" SelectedIndex="0" Grid.Column="0" Padding="5" >
                    <ComboBoxItem ToolTip="{Resx _toolbar.ClearAll}" >
                        <Button Command="{Binding CommandClearAll}" Style="{StaticResource controlPanelButtons}">
                            <Image Source="../Glyphs/Stop.png" />
                        </Button>
                    </ComboBoxItem>
                    <ComboBoxItem ToolTip="{Resx _toolbar.ClearCG1}" >
                        <Button Command="{Binding CommandClearLayer}" CommandParameter="1" Style="{StaticResource controlPanelButtons}">
                            <Image Source="../Glyphs/Circle_1.png" />
                        </Button>
                    </ComboBoxItem>
                    <ComboBoxItem ToolTip="{Resx _toolbar.ClearCG2}" >
                        <Button Command="{Binding CommandClearLayer}" CommandParameter="2" Style="{StaticResource controlPanelButtons}">
                            <Image Source="../Glyphs/Circle_2.png" />
                        </Button>
                    </ComboBoxItem>
                    <ComboBoxItem ToolTip="{Resx _toolbar.ClearCG3}" >
                        <Button Command="{Binding CommandClearLayer}" CommandParameter="3" Style="{StaticResource controlPanelButtons}">
                            <Image Source="../Glyphs/Circle_3.png" />
                        </Button>
                    </ComboBoxItem>
                </ComboBox>
                <StackPanel Grid.Column="2">
                    <ToggleButton Margin="2" Height="22" IsChecked="{Binding TrackPlayingEvent}" Background="{Binding TrackPlayingEvent, Converter={StaticResource BoolToBrush}, ConverterParameter=LightCoral}" HorizontalContentAlignment="Left" >
                        <StackPanel Orientation="Horizontal">
                            <Image Source="../Glyphs/go-bottom.png" />
                            <Label Content="{Resx _toolbar.Track}" />
                        </StackPanel>
                    </ToggleButton> 
                </StackPanel>
            </Grid>
            <Label Content="{Resx _toolbar.EngineTime}" />
            <TextBlock Grid.Row="1" Text="{Binding CurrentTime, Converter={StaticResource DateTimeFormat}, ConverterParameter=T}" />
            <Label Content="{Resx _toolbar.TimeToPause}" Grid.Column="3" />
            <TextBlock Grid.Row="1" Grid.Column="3" Text="{Binding TimeToPause, Converter={StaticResource TimeSpanToSMPTE}, ConverterParameter=HIDE_ZERO_VALUE}" Background="{Binding EngineState, Converter={StaticResource EngineStateToBrush}}"/>
            <Label Content="{Resx _toolbar.NowPlaying}" Grid.Column="4" />
            <TextBlock Grid.Row="1" Grid.Column="4" Text="{Binding PlayingEvent.EventName}">
                <TextBlock.ToolTip>
                    <TextBlock FontSize="12" Text="{Binding PlayingEvent.NextEventName, StringFormat={Resx _toolbar.NextEvent.ToolTip, ResxName=TAS.Client.Views.EngineView}}" />
                </TextBlock.ToolTip>
                <TextBlock.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="{Resx _toolbar.playingEventName.Menu.Restart, ResxName=TAS.Client.Views.EngineView}" Command="{Binding CommandRestartLayer}" CommandParameter="0"/>
                    </ContextMenu>
                </TextBlock.ContextMenu>
            </TextBlock>
            <!--<c:PlayingEventUC Grid.Column="4" Grid.RowSpan="2" DataContext="{Binding PlayingEvent}"/>-->
            <Slider Grid.Column="5" Grid.RowSpan="2" Orientation="Vertical" Value="{Binding AudioVolume}" Minimum="-15" Maximum="15"/>
            <Label Grid.Column="6" Content="dB" HorizontalAlignment="Center"/>
            <TextBox Grid.Column="6" Grid.Row="1" Text="{Binding AudioVolume, StringFormat={}{0:0.0}}" Margin="4, 8"/>
        </Grid>
        <StatusBar Name="sbChannelStatus" VerticalAlignment="Bottom" Grid.Row="3" >
            <StatusBar.Resources>
                <Style TargetType="c:StatusIndicator">
                    <Setter Property="Height" Value="12"/>
                </Style>
                <Style TargetType="CheckBox">
                    <Setter Property="VerticalAlignment" Value="Center"/>
                </Style>
                <Style TargetType="Label">
                    <Setter Property="VerticalAlignment" Value="Center"/>
                </Style>
            </StatusBar.Resources>
            <StatusBarItem>
             <StackPanel Orientation="Horizontal" >
                <c:AutoGreyableImage Source="../Glyphs/OnAir.png" Visibility="{Binding GPIExists, Converter={StaticResource BoolToVis}}" IsEnabled="{Binding GPIIsMaster}" />
                <StackPanel Orientation="Horizontal">
                    <c:StatusIndicator IsGreen="{Binding ServerConnectedPGM}" Width="{Binding ActualHeight, RelativeSource={RelativeSource Self}}" Margin="10,2,0,2"/>
                    <Label Content="PGM" Padding="5, 0" />
                    <c:StatusIndicator IsGreen="{Binding ServerConnectedPRV}" Width="{Binding ActualHeight, RelativeSource={RelativeSource Self}}" Margin="10,2,0,2"/>
                    <Label Content="PRV" Padding="5, 0" />
                    <CheckBox Content="PST" Margin="5, 0" IsChecked="{Binding Pst2Prv}"/>
                </StackPanel>
                <StackPanel Orientation="Horizontal" Visibility="{Binding GPIExists, Converter={StaticResource BoolToVis}}">
                    <Separator Width="5"  Style="{StaticResource {x:Static ToolBar.SeparatorStyleKey}}" />
                    <c:StatusIndicator IsGreen="{Binding GPIConnected}" Width="{Binding ActualHeight, RelativeSource={RelativeSource Self}}" Margin="10,2,0,2"/>
                    <Label Content="GPI" Padding="5, 0, 0, 0"/>
                    <StackPanel Orientation="Horizontal" Visibility="{Binding GPIConnected, Converter={StaticResource BoolToVis}}" IsEnabled="{Binding GPIIsMaster}">
                            <CheckBox Margin="10, 0" Content="{Resx _statusbar.Gpi.Active}" IsChecked="{Binding GPIEnabled}"/>
                        <StackPanel Orientation="Horizontal" IsEnabled="{Binding GPIEnabled}">
                            <StackPanel.Resources>
                                <Style TargetType="CheckBox">
                                    <Setter Property="VerticalAlignment" Value="Center"/>
                                    <Style.Triggers>
                                        <Trigger Property="IsEnabled" Value="false">
                                            <Setter Property="Foreground" Value="Black"/>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                                <Style TargetType="ComboBox">
                                    <Setter Property="VerticalAlignment" Value="Center"/>
                                    <Style.Triggers>
                                        <Trigger Property="IsEnabled" Value="false">
                                            <Setter Property="Foreground" Value="Black"/>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                                <Style TargetType="Label">
                                    <Setter Property="VerticalAlignment" Value="Center"/>
                                    <Style.Triggers>
                                        <Trigger Property="IsEnabled" Value="false">
                                            <Setter Property="Foreground" Value="Black"/>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </StackPanel.Resources>
                            <CheckBox IsChecked="{Binding GPIAspectNarrow}" Content="{Binding GPIAspectNarrow, Converter={StaticResource BooleanToAspectDescriptionConverter}}" Padding="5, 0" Width="50"/>
                                <Label Padding="5, 0" Content="{Resx _statusbar.Gpi.Crawl}"/>
                            <ComboBox Width="90" ItemsSource="{Binding GPICrawls}" SelectedValue="{Binding GPICrawl}" />
                                <Label Padding="5, 0" Content="{Resx _statusbar.Gpi.Logo}"/>
                            <ComboBox Width="90" ItemsSource="{Binding GPILogos}" SelectedValue="{Binding GPILogo}" />
                                <Label Padding="5, 0" Content="{Resx _statusbar.Gpi.Parental}"/>
                            <ComboBox Width="90" ItemsSource="{Binding GPIParentals}" SelectedValue="{Binding GPIParental}" />
                        </StackPanel>
                    </StackPanel>
                </StackPanel>
            </StackPanel>
            </StatusBarItem>
            <StatusBarItem HorizontalAlignment="Right" Panel.ZIndex="1" Background="{Binding Path=Background, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type StatusBar}}}">
                <StackPanel Orientation="Horizontal" >
                    <TextBlock Text="{Binding Path=SelectedCount, StringFormat={Resx _statusbar.Selected, ResxName=TAS.Client.Views.EngineView}}" VerticalAlignment="Center"/>
                    <TextBlock Text="{Resx _statusbar.Total}"/>
                    <TextBlock Text="{Binding SelectedTime, Converter={StaticResource TimeSpanToSMPTE}}" VerticalAlignment="Center" />
                </StackPanel>
            </StatusBarItem>
        </StatusBar>
        <Grid Grid.Row="2">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="350" />
            </Grid.ColumnDefinitions>
            <TreeView Grid.RowSpan="2" 
                      c:TreeViewExtensions.EnableMultiSelect="True" 
                      c:TreeViewExtensions.SelectedItems="{Binding SelectedEvents}" 
                      ItemsSource="{Binding RootEventViewModel.Childrens}" 
                      Background="{x:Null}" 
                      c:TreeViewExtensions.CursorWaitOnGeneratingItems="True"
                      >
                <TreeView.ItemContainerStyle>
                    <Style TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource tvItemStyle}">
                        <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
                        <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
                        <Setter Property="Visibility" Value="{Binding IsVisible, Converter={StaticResource BoolToVis}}"/>
                        <Setter Property="c:TreeViewExtensions.IsSelected" Value="{Binding IsMultiSelected, Mode=TwoWay}" />
                        <Setter Property="Margin" Value="0"/>
                        <Style.Triggers>
                            <Trigger Property="c:TreeViewExtensions.IsSelected"  Value="True" >
                                <Setter Property="Background" Value="LightSkyBlue"></Setter>
                            </Trigger>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="common:TreeViewItemBringIntoViewWhenSelected.BringIntoViewWhenSelected" Value="True" />
                            </Trigger>
                            <Trigger Property="IsSelected" Value="False">
                                <Setter Property="common:TreeViewItemBringIntoViewWhenSelected.BringIntoViewWhenSelected" Value="False" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </TreeView.ItemContainerStyle>
                <TreeView.ItemTemplate >
                    <HierarchicalDataTemplate ItemsSource="{Binding Childrens}" >
                        <c:EventPanelView />
                    </HierarchicalDataTemplate>
                </TreeView.ItemTemplate>
            </TreeView>
            <GridSplitter Grid.Column="0" ResizeDirection="Columns" HorizontalAlignment="Right" Background="DarkGray" Width="3" Cursor="SizeWE"/>
            <Grid Grid.Column="1">
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="290"/>
                </Grid.RowDefinitions>
                <c:EventEditView Grid.Row="0" FocusManager.IsFocusScope="True" DataContext="{Binding EventEditViewmodel}"/>
                <GridSplitter Grid.Row="0" ResizeDirection="Rows" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" Background="DarkGray" Height="3" Cursor="SizeNS"/>
                <c:PreviewView Grid.Row="1" DataContext="{Binding PreviewViewmodel}" />
            </Grid>
        </Grid>
    </Grid>     
    
</UserControl>
