<UserControl Language="{UICulture}" ResxExtension.DefaultResxName="TAS.Client.Views.MediaManagerView"
             x:Class="TAS.Client.MediaManagerView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
             xmlns:System="clr-namespace:System;assembly=mscorlib"
             mc:Ignorable="d" 
             d:DesignHeight="800" d:DesignWidth="1000"
             xmlns:vm="clr-namespace:TAS.Client.ViewModels"
             xmlns:server="clr-namespace:TAS.Server"
             xmlns:client="clr-namespace:TAS.Client"
             xmlns:common="clr-namespace:TAS.Client.Common;assembly=TAS.Client.Common"
             FontSize="13" >
    <UserControl.Resources>

        <common:IntToStringNoZeroConverter x:Key="IntToStringNoZero" />
        <Style x:Key="fieldNameLabels" TargetType="Label" >
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="HorizontalContentAlignment" Value="Right" />
            <Setter Property="Margin" Value="10, 0" />
            <Setter Property="Width" Value="130" />
        </Style>
        <Style x:Key="fieldsDetail" TargetType="TextBox" >
            <Setter Property="Margin" Value="10, 3" />
            <Setter Property="Width" Value="150" />
        </Style>
        <Style x:Key="combosDetail" TargetType="ComboBox" >
            <Setter Property="Margin" Value="10, 3" />
            <Setter Property="Width" Value="150" />
        </Style>
        <!--<ObjectDataProvider x:Key="VideoFormatEnum" MethodName="GetValues" ObjectType="{x:Type System:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="server:TVideoFormat"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>
        <ObjectDataProvider x:Key="AudioChannelMappingEnum" MethodName="GetValues" ObjectType="{x:Type System:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="server:TAudioChannelMapping"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>-->
        <SolidColorBrush x:Key="GlyphBrush" Color="#444" />
        <ControlTemplate x:Key="toggleButtonTemplate" TargetType="ToggleButton">
            <Grid
            Width="15"
            Height="13"
            Background="Transparent">
                <Path x:Name="ExpandPath"
              HorizontalAlignment="Left" 
              VerticalAlignment="Center" 
              Margin="1,1,1,1"
              Fill="{StaticResource GlyphBrush}"
              Data="M 4 0 L 8 4 L 4 8 Z"/>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="IsChecked"
                 Value="True">
                    <Setter Property="Data"
                  TargetName="ExpandPath"
                  Value="M 0 4 L 8 4 L 4 8 Z"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <Style x:Key="toggleButtonStyle" TargetType="ToggleButton">
            <Setter Property="Template" Value="{StaticResource toggleButtonTemplate}" />
        </Style>
    </UserControl.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="30" />
            <RowDefinition Height="40" />
            <RowDefinition Height="*" />
            <RowDefinition Height="200"/>
            <RowDefinition Height="22"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="2*"/>
            <ColumnDefinition Width="330" />
        </Grid.ColumnDefinitions>
        <Grid Height="30">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="85" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="120" />
                <ColumnDefinition Width="130" />
            </Grid.ColumnDefinitions>
            <Label Grid.Column="0" Content="{Resx _search}"  Margin="10, 0" VerticalAlignment="Center" />
            <TextBox Grid.Column="1" VerticalAlignment="Center" Text="{Binding SearchText, UpdateSourceTrigger=PropertyChanged}" />
            <ComboBox Grid.Column="2" Margin="5, 3" ItemsSource="{Binding MediaDirectories}" SelectedValue="{Binding MediaDirectory}" />
            <ComboBox Grid.Column="3" Margin="5, 3" ItemsSource="{Binding MediaCategories}"  SelectedValue="{Binding MediaCategory}" />
            <Button Grid.Column="4"  HorizontalAlignment="Left" ToolTip="{Resx _refresh}" Command="{Binding CommandRefresh}">
                <common:AutoGreyableImage Source="../Glyphs/Refresh.png" />
            </Button>
            <Button Grid.Column="4" Name="btnSearch" Content="{Resx _find}" IsDefault="True" Margin="40,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Center" Height="25" 
                    Command="{Binding CommandSearch}" Width="80" />
        </Grid>
        <DataGrid Name="fileList" Grid.Row="2" SelectionUnit="FullRow" SelectionMode="Extended" AutoGenerateColumns="False" ItemsSource="{Binding MediaItems}" SelectedItem="{Binding Path=SelectedMedia, Mode=TwoWay}" RowHeaderWidth="0" IsReadOnly="True">
            <i:Interaction.Behaviors>
                <client:BindableSelectedItems SelectedItems="{Binding SelectedMediaList, Mode=OneWayToSource}"/>
            </i:Interaction.Behaviors>
            <DataGrid.RowStyle>
                <Style TargetType="DataGridRow">
                    <Style.Resources>
                        <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="Navy"/>
                        <SolidColorBrush x:Key="{x:Static SystemColors.ControlTextBrushKey}" Color="White"/>
                    </Style.Resources>
                    <Setter Property="DetailsVisibility" Value="{Binding IsExpanded, Converter={StaticResource BoolToVis}}" />
                    <Setter Property="Background" Value="{Binding MediaEmphasis, Converter={StaticResource MediaEmphasisToBrush}}" />
                </Style>
            </DataGrid.RowStyle>
            <DataGrid.Columns>
                <DataGridTemplateColumn x:Name="toggle" CanUserResize="False" CanUserSort="False" Width="20">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <ToggleButton Visibility="{Binding HasSegments, Converter={StaticResource BoolToVis}}" IsChecked="{Binding IsExpanded, UpdateSourceTrigger=PropertyChanged}" Width="14" Height="14" Style="{StaticResource toggleButtonStyle}"  />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn Width="10" >
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Image x:Name="trimmedImage" />
                            <DataTemplate.Triggers>
                                <DataTrigger Binding="{Binding IsTrimmed}" Value="True">
                                    <Setter Property="Source" TargetName="trimmedImage" Value="../Glyphs/Scizors.png" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding IsTrimmed}" Value="False">
                                    <Setter Property="Source" TargetName="trimmedImage" Value="../Glyphs/Empty.png" />
                                </DataTrigger>
                            </DataTemplate.Triggers>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn Width="10" CanUserSort="True">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Image x:Name="stateImage" />
                            <DataTemplate.Triggers>
                                <DataTrigger Binding="{Binding MediaStatus}" Value="Available">
                                    <Setter Property="Source" TargetName="stateImage" Value="../Glyphs/MediaStates/Available.png"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding MediaStatus}" Value="Copied">
                                    <Setter Property="Source" TargetName="stateImage" Value="../Glyphs/MediaStates/Copied.png"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding MediaStatus}" Value="CopyError">
                                    <Setter Property="Source" TargetName="stateImage" Value="../Glyphs/MediaStates/CopyError.png"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding MediaStatus}" Value="ValidationError">
                                    <Setter Property="Source" TargetName="stateImage" Value="../Glyphs/MediaStates/ValidationError.png"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding MediaStatus}" Value="Copying">
                                    <Setter Property="Source" TargetName="stateImage" Value="../Glyphs/MediaStates/Copying.png"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding MediaStatus}" Value="CopyPending">
                                    <Setter Property="Source" TargetName="stateImage" Value="../Glyphs/MediaStates/CopyPending.png"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding MediaStatus}" Value="Deleted">
                                    <Setter Property="Source" TargetName="stateImage" Value="../Glyphs/MediaStates/Deleted.png"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding MediaStatus}" Value="Required">
                                    <Setter Property="Source" TargetName="stateImage" Value="../Glyphs/MediaStates/Required.png"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding MediaStatus}" Value="Unknown">
                                    <Setter Property="Source" TargetName="stateImage" Value="../Glyphs/MediaStates/Unknown.png"/>
                                </DataTrigger>
                            </DataTemplate.Triggers>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTextColumn x:Name="clipName" Header="{Resx ResxName=TAS.Client.Views.MediaManagerView, Key=_grid.Header.ClipName}" Width="2*" Binding="{Binding MediaName, Mode=OneWay}" IsReadOnly="True" />
                <DataGridTextColumn x:Name="ingestDate" Header="{Resx ResxName=TAS.Client.Views.MediaManagerView, Key=_grid.Header.IngestDate}" Width="120" Binding="{Binding LastUpdated, StringFormat=g, Mode=OneWay}" IsReadOnly="True" />
                <DataGridTextColumn x:Name="tCStart" Header="{Resx ResxName=TAS.Client.Views.MediaManagerView, Key=_grid.Header.TcStart}" Width="80" Binding="{Binding TCStart, Converter={StaticResource TimeSpanToSMPTE}, Mode=OneWay}" IsReadOnly="True" />
                <DataGridTextColumn x:Name="duration" Header="{Resx ResxName=TAS.Client.Views.MediaManagerView, Key=_grid.Header.Duration}"  Width="90" Binding="{Binding Duration, Converter={StaticResource TimeSpanToSMPTE}, Mode=OneWay}" IsReadOnly="True" />
                <DataGridTextColumn Header="{Resx ResxName=TAS.Client.Views.MediaManagerView, Key=_grid.Header.FileName}" Width="*" Binding="{Binding FileName, Mode=OneWay}" IsReadOnly="True" />
            </DataGrid.Columns>
            <DataGrid.RowDetailsTemplate>
                <DataTemplate >
                    <ListView ItemsSource="{Binding MediaSegments}" FontStyle="Italic" SelectionMode="Single">
                        <ListView.View>
                            <GridView >
                                <GridView.ColumnHeaderContainerStyle>
                                    <Style TargetType="GridViewColumnHeader">
                                        <Setter Property="Visibility" Value="Collapsed" />
                                    </Style>
                                </GridView.ColumnHeaderContainerStyle>
                                <GridViewColumn Width="{Binding ElementName=toggle, Path=ActualWidth}" >
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate />
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>
                                <GridViewColumn DisplayMemberBinding="{Binding SegmentName, Mode=OneWay}" Width="{Binding ElementName=clipName, Path=ActualWidth}" />
                                <GridViewColumn Width="{Binding ElementName=ingestDate, Path=ActualWidth}">
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate />
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>
                                <GridViewColumn DisplayMemberBinding="{Binding TCIn, Converter={StaticResource TimeSpanToSMPTE}, Mode=OneWay}" Width="{Binding ElementName=tCStart, Path=ActualWidth}" />
                                <GridViewColumn DisplayMemberBinding="{Binding Duration, Converter={StaticResource TimeSpanToSMPTE}, Mode=OneWay}" Width="{Binding ElementName=duration, Path=ActualWidth}" />
                            </GridView>
                        </ListView.View>
                    </ListView>
                </DataTemplate>
            </DataGrid.RowDetailsTemplate>
        </DataGrid>
        <GridSplitter Grid.Row="1" Grid.Column="1" ResizeDirection="Columns" Grid.RowSpan="3" VerticalAlignment="Stretch" HorizontalAlignment="Left"  Background="DarkGray" Width="3" Cursor="SizeWE" />
        <Grid Grid.Column="1" Grid.Row="1" Grid.RowSpan="3" >
            <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
                <RowDefinition Height="300" />
            </Grid.RowDefinitions>
            <client:MediaEditView DataContext="{Binding EditMedia}" />
            <GridSplitter Grid.Row="0" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" ResizeBehavior="BasedOnAlignment" ResizeDirection="Rows" Background="DarkGray" Height="3" Cursor="SizeNS"/>
            <client:PreviewView DataContext="{Binding PreviewViewModel}" Grid.Row="1" />
        </Grid>
        <ToolBar ToolBarTray.IsLocked="True" Grid.Row="1"  Height="35" >
            <ToolBar.Resources>
                <Style TargetType="Label">
                    <Setter Property="Padding" Value="3"/>
                </Style>
            </ToolBar.Resources>
            <Button ToolTip="{Resx _toolbar.Ingest.ToolTip}" Margin="10, 0" Command="{Binding CommandIngestSelectedToServer}">
                <StackPanel  Orientation="Horizontal" >
                    <common:AutoGreyableImage Source="../Glyphs/Import.png" />
                    <Label Content="{Resx _toolbar.Ingest}"/>
                </StackPanel>
            </Button>
            <Button ToolTip="{Resx _toolbar.ArchiveDelete.ToolTip}" Margin="10,0" Command="{Binding CommandMoveSelectedToArchive}">
                <StackPanel Orientation="Horizontal">
                    <common:AutoGreyableImage Source="../Glyphs/ExportDelete.png" />
                    <Label Content="{Resx _toolbar.ArchiveDelete}"/>
                </StackPanel>
            </Button>
            <Button ToolTip="{Resx _toolbar.ArchiveLeft.ToolTip}" Margin="10,0" Command="{Binding CommandCopySelectedToArchive}">
                <StackPanel Orientation="Horizontal">
                    <common:AutoGreyableImage Source="../Glyphs/Export.png" />
                    <Label Content="{Resx _toolbar.ArchiveLeft}"/>
                </StackPanel>
            </Button>
            <Button ToolTip="{Resx _toolbar.GetLoudness.ToolTip}" Margin="10,0" Command="{Binding CommandGetLoudness}">
                <StackPanel Orientation="Horizontal">
                    <common:AutoGreyableImage Source="../Glyphs/Volume.png"/>
                    <Label Content="{Resx _toolbar.GetLoudness}"/>
                </StackPanel>
            </Button>
            <Button ToolTip="{Resx _toolbar.Export.ToolTip}" Margin="10,0" Command="{Binding CommandExport}">
                <StackPanel Orientation="Horizontal">
                    <common:AutoGreyableImage Source="../Glyphs/Export.png"/>
                    <Label Content="{Resx _toolbar.Export}"/>
                </StackPanel>
            </Button>
            <Button ToolTip="{Resx _toolbar.Delete.ToolTip}" Margin="30,0" Command="{Binding CommandDeleteSelected}">
                <StackPanel Orientation="Horizontal">
                    <common:AutoGreyableImage Source="../Glyphs/Trash.png" />
                    <Label Content="{Resx _toolbar.Delete}"/>
                </StackPanel>
            </Button>
        </ToolBar>
        <Button Grid.Row="1" HorizontalAlignment="Right" Margin="5" Width="30" Command="{Binding CommandSweepStaleMedia}" Visibility="Hidden">
            <common:AutoGreyableImage Source="../Glyphs/Trash.png" />
        </Button>
        <GridSplitter Grid.Row="2" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" ResizeBehavior="BasedOnAlignment" ResizeDirection="Rows" Background="DarkGray" Height="3" Cursor="SizeNS"/>
        <client:FileManagerView Grid.Row="3"/>
        <StatusBar Grid.Row="4" Grid.ColumnSpan="2" Height="22">
            <StackPanel Orientation="Horizontal" Visibility="{Binding DisplayDirectoryInfo, Converter={StaticResource BoolToVis}}" >
                <common:StatusIndicator IsGreen="{Binding DirectoryFreeOver20Percent}" Width="{Binding ActualHeight, RelativeSource={RelativeSource Self}}" Margin="10,0,0,0"/>
                <TextBlock Text="{Resx _statusbar.TotalItems}" Margin="5, 0"/>
                <TextBlock Text="{Binding ItemsCount}" />
                <TextBlock Text="{Resx _statusbar.VolumeSize}" Margin="5, 0"/>
                <TextBlock Text="{Binding DirectoryTotalSpace, StringFormat=' \{0:F2\} GB'}" />
                <TextBlock Text="{Resx _statusbar.VolumeFreeSpace}" Margin="5, 0"/>
                <TextBlock Text="{Binding DirectoryFreeSpace, StringFormat=' \{0:F2\} GB'}" />
                <TextBlock Text="{Binding DirectoryFreePercentage, StringFormat='(\{0:F1\} %)'}" />
            </StackPanel>
        </StatusBar>
    </Grid>
</UserControl>
