<UserControl ResxExtension.DefaultResxName="TAS.Client.Views.EngineView" Language="{UICulture}" 
             x:Class="TAS.Client.Views.EngineView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
             xmlns:vievmodels="clr-namespace:TAS.Client.ViewModels" 
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             xmlns:views="clr-namespace:TAS.Client.Views" 
             xmlns:common="clr-namespace:TAS.Client.Common;assembly=TAS.Client.Common"
             xmlns:controls="clr-namespace:TAS.Client.Common.Controls;assembly=TAS.Client.Common"
             mc:Ignorable="d" 
             d:DataContext="{x:Type vievmodels:EngineViewmodel}"
             d:DesignHeight="850" d:DesignWidth="1150" Focusable="True" 
             FontSize="13"
             >
    <UserControl.Resources>
        <common:TimeSpanToSMPTEConverter x:Key="TimeSpanToSMPTE" />
        <Style x:Key="controlPanelButtons" TargetType="Button" >
            <Setter Property="Padding" Value="4" />
            <Setter Property="Width" Value="40" />
            <Setter Property="Height" Value="40" />
        </Style>
    </UserControl.Resources>
    <UserControl.InputBindings>
        <KeyBinding Command="{Binding CommandStartSelected}" Gesture="Ctrl+F3"/>
        <KeyBinding Command="{Binding CommandStartLoaded}" Gesture="F3"/>
        <KeyBinding Command="{Binding CommandTrackingToggle}" Gesture="Scroll" />
        <KeyBinding Command="{Binding CommandClearAll}" Gesture="Shift+Pause" />
        <KeyBinding Command="{Binding CommandLoadSelected}" Gesture="F2" />
        <KeyBinding Command="{Binding CommandForceNextSelected}" Gesture="Ctrl+F2"/>
        <KeyBinding Command="{Binding CommandRescheduleSelected}" Gesture="F4" />
        <KeyBinding Command="{Binding CommandToggleHold}" Gesture="F6" />
        <KeyBinding Command="{Binding CommandToggleEnabled}" Gesture="F7" />

        <KeyBinding Command="{Binding CommandCutSelected}" Gesture="Ctrl+X" />
        <KeyBinding Command="{Binding CommandCopySelected}" Gesture="Ctrl+C" />
        <KeyBinding Command="{Binding CommandPasteSelected}" CommandParameter="After" Gesture="Ctrl+V" />
        <KeyBinding Command="{Binding CommandDeleteSelected}" Gesture="Ctrl+Delete" />

        <KeyBinding Command="{Binding CommandSaveEdit}" Gesture="Ctrl+S" />
        <KeyBinding Command="{Binding CommandUndoEdit}" Gesture="Ctrl+U" />

        <KeyBinding Command="{Binding CommandAddNextMovie}" Gesture="Ctrl+M"/>
        <KeyBinding Command="{Binding CommandAddNextEmptyMovie}" Gesture="Shift+Ctrl+M"/>
        <KeyBinding Command="{Binding CommandAddNextLive}" Gesture="Ctrl+L"/>
        <KeyBinding Command="{Binding CommandAddNextRundown}" Gesture="Ctrl+R"/>
        <KeyBinding Command="{Binding CommandToggleLayer}" CommandParameter="17" Gesture="Ctrl+1"/>
        <KeyBinding Command="{Binding CommandToggleLayer}" CommandParameter="18" Gesture="Ctrl+2"/>
        <KeyBinding Command="{Binding CommandToggleLayer}" CommandParameter="19" Gesture="Ctrl+3"/>
        <KeyBinding Command="{Binding CommandToggleLayer}" CommandParameter="17" Gesture="Ctrl+NumPad1"/>
        <KeyBinding Command="{Binding CommandToggleLayer}" CommandParameter="18" Gesture="Ctrl+NumPad2"/>
        <KeyBinding Command="{Binding CommandToggleLayer}" CommandParameter="19" Gesture="Ctrl+NumPad3"/>
        <KeyBinding Command="{Binding CommandEventHide}" Gesture="F9"/>
        <KeyBinding Command="{Binding CommandMoveUp}" Gesture="Alt+Up"/>
        <KeyBinding Command="{Binding CommandMoveDown}" Gesture="Alt+Down"/>
        <KeyBinding Command="{Binding CommandSearchShowPanel}" Gesture="Ctrl+F"/>
    </UserControl.InputBindings>
    <UserControl.Style>
        <Style TargetType="UserControl">
            <Style.Triggers>
                <DataTrigger Binding="{Binding IsSearchPanelVisible}" Value="True">
                </DataTrigger>
            </Style.Triggers>
        </Style>
    </UserControl.Style>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="23" />
            <RowDefinition Height="63"  />
            <RowDefinition Height="*"  />
            <RowDefinition Height="28" />
        </Grid.RowDefinitions>
        <Menu IsMainMenu="True" Height="23" HorizontalAlignment="Left" VerticalAlignment="Top">
            <MenuItem Header="{Resx _menu.Container}">
                <MenuItem Header="{Resx _menu.Container.AddContainer}" Command="{Binding CommandNewContainer}"/>
                <MenuItem Header="{Resx _menu.Container.Show}" Visibility="{Binding IsAnyContainerHidden, Converter={StaticResource BoolToVis}}" ItemsSource="{Binding Path=RootEventViewModel.Containers}">
                    <MenuItem.ItemContainerStyle>
                        <Style TargetType="MenuItem">
                            <Setter Property="Visibility" Value="{Binding IsVisible, Converter={StaticResource InvertedBoolToVis}}"/>
                            <Setter Property="Command" Value="{Binding CommandShow}"/>
                            <Setter Property="Header" Value="{Binding EventName}"/>
                        </Style>
                    </MenuItem.ItemContainerStyle>
                </MenuItem>
            </MenuItem>
            <MenuItem Header="{Resx _menu.Rundown}">
                <MenuItem Header="{Resx _menu.Rundown.AddEmpty}" Command="{Binding CommandNewRootRundown}"/>
                <!--<MenuItem Header="_Importuj playlistę" Command="{Binding CommandImportRundown}"/>-->
                <MenuItem Header="{Resx _menu.Rundown.Restart}" Command="{Binding CommandRestart}"/>
                <Separator/>
                <MenuItem Header="{Resx _menu.Rundown.Save}" Command="{Binding CommandSaveRundown}"/>
                <MenuItem Header="{Resx _menu.Rundown.Load}" >
                    <MenuItem Header="{Resx _menu.Rundown.Load.After}" Command="{Binding CommandLoadRundown}" CommandParameter="After"/>
                    <MenuItem Header="{Resx _menu.Rundown.Load.Under}" Command="{Binding CommandLoadRundown}" CommandParameter="Under"/>
                </MenuItem>
                <Separator/>
                <MenuItem Header="{Resx _menu.Rundown.Search}" Command="{Binding CommandSearchShowPanel}" InputGestureText="Ctrl+F"/>
            </MenuItem>
            <MenuItem Header="{Resx _menu.Edit}">
                <MenuItem Header="{Resx _menu.Edit.Copy}" Command="{Binding CommandCopySelected}" InputGestureText="Ctrl+C"/>
                <MenuItem Header="{Resx _menu.Edit.Cut}" Command="{Binding CommandCutSelected}" InputGestureText="Ctrl+X"/>
                <MenuItem Header="{Resx _menu.Edit.Paste}">
                    <MenuItem Header="{Resx _menu.Edit.Paste.Before}" Command="{Binding CommandPasteSelected}" CommandParameter="Before"/>
                    <MenuItem Header="{Resx _menu.Edit.Paste.After}" Command="{Binding CommandPasteSelected}" CommandParameter="After" InputGestureText="Ctrl+V"/>
                    <MenuItem Header="{Resx _menu.Edit.Paste.Under}" Command="{Binding CommandPasteSelected}" CommandParameter="Under"/>
                </MenuItem>
                <Separator />
                <MenuItem Header="{Resx _menu.Edit.AddNext}" >
                    <MenuItem Header="{Resx _menu.Edit.AddNext.Movie}" Command="{Binding CommandAddNextMovie}" InputGestureText="Ctrl+M"/>
                    <MenuItem Header="{Resx _menu.Edit.AddNext.Rundown}" Command="{Binding CommandAddNextRundown}" InputGestureText="Ctrl+R"/>
                    <MenuItem Header="{Resx _menu.Edit.AddNext.Live}" Command="{Binding CommandAddNextLive}" InputGestureText="Ctrl+L" />
                </MenuItem>
                <MenuItem Header="{Resx _menu.Edit.AddUnder}">
                    <MenuItem Header="{Resx _menu.Edit.AddNext.Movie}" Command="{Binding CommandAddSubMovie}" />
                    <MenuItem Header="{Resx _menu.Edit.AddNext.Rundown}" Command="{Binding CommandAddSubRundown}" />
                    <MenuItem Header="{Resx _menu.Edit.AddNext.Live}" Command="{Binding CommandAddSubLive}" />
                </MenuItem>
                <Separator />
                <MenuItem Header="{Resx _menu.Edit.DeleteSelected}" Command="{Binding CommandDeleteSelected}" InputGestureText="Ctrl+Delete" />
            </MenuItem>
            <MenuItem Header="{Resx _menu.Tools}">
                <MenuItem Header="{Resx _menu.Tools.Export}">
                    <MenuItem Header="{Resx _menu.Tools.Export.All}" Command="{Binding CommandExportMedia}" CommandParameter="All"/>
                    <MenuItem Header="{Resx _menu.Tools.Export.EnabledOnly}" Command="{Binding CommandExportMedia}" />
                </MenuItem>
                <Separator/>
                <MenuItem Header="{Resx _menu.Tools.FindUnlinkedEvents}" Command="{Binding CommandSearchMissingEvents}" />
                <MenuItem Header="{Resx _menu.Tools.DebugWindow}" Command="{Binding CommandDebugToggle}" />
                <MenuItem Header="{Resx _menu.Tools.Plugins}" Visibility="{Binding IsAnyPluginActive, Converter={StaticResource BoolToVis}}" ItemsSource="{Binding Plugins}">
                    <MenuItem.ItemContainerStyle>
                        <Style TargetType="MenuItem">
                            <Setter Property="Command" Value="{Binding}"/>
                            <Setter Property="Header" Value="{Binding Header}"/>
                        </Style>
                    </MenuItem.ItemContainerStyle>
                </MenuItem>

                <!--<MenuItem Header="Playout">
                    <MenuItem Header="Wznów" Command="{Binding CommandResume}" />
                    <MenuItem Header="Wstrzymaj" Command="{Binding CommandPause}" />
                </MenuItem>-->
            </MenuItem>
        </Menu>
        <Grid Grid.RowSpan="2">
            <Grid.Resources>
                <Style TargetType="Label">
                    <Setter Property="Padding" Value="0"/>
                    <Setter Property="Margin" Value="5, 0"/>
                    <Setter Property="VerticalAlignment" Value="Center"/>
                </Style>
                <Style TargetType="TextBlock">
                    <Setter Property="Padding" Value="0"/>
                    <Setter Property="Margin" Value="5, 0"/>
                    <Setter Property="FontSize" Value="22" />
                    <Setter Property="HorizontalAlignment" Value="Left"/>
                    <Setter Property="VerticalAlignment" Value="Center"/>
                </Style>
                <Style TargetType="Button">
                    <Setter Property="Width" Value="40"/>
                    <Setter Property="Height" Value="40"/>
                    <Setter Property="Margin" Value="8"/>
                </Style>
            </Grid.Resources>
            <Grid.RowDefinitions>
                <RowDefinition Height="19"/>
                <RowDefinition Height="25"/>
                <RowDefinition Height="19"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{Resx Key=_toolbar.clockWidth, DefaultValue='160'}"/>
                <ColumnDefinition Width="430"/>
                <ColumnDefinition Width="140"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="100"/>
            </Grid.ColumnDefinitions>
            <StackPanel Grid.Row="1" Grid.Column="1" Grid.RowSpan="3" Orientation="Horizontal" FocusManager.IsFocusScope="True">
                <Button Command="{Binding CommandStartSelected}" ToolTip="{Resx _toolbar.StartSelected}">
                    <controls:AutoGreyableImage Source="/TAS.Client.Common;component/Images/EventActions/play.png" Stretch="None" />
                </Button>
                <Button Command="{Binding CommandLoadSelected}" ToolTip="{Resx _toolbar.Load}">
                    <controls:AutoGreyableImage Source="/TAS.Client.Common;component/Images/EventActions/pause.png" Stretch="None" />
                </Button>
                <Button Command="{Binding CommandStartLoaded}" ToolTip="{Resx _toolbar.StartLoaded}">
                    <controls:AutoGreyableImage Source="/TAS.Client.Common;component/Images/EventActions/play-pause.png" Stretch="None" />
                </Button>
                <ToggleButton Command="{Binding CommandForceNextSelected}" IsChecked="{Binding IsForcedNext, Mode=OneWay}" ToolTip="{Resx _toolbar.ForceNext}" Background="{Binding IsForcedNext, Converter={StaticResource BoolToBrush}, ConverterParameter=LightCoral}" Width="40" Height="40" Margin="8">
                    <controls:AutoGreyableImage Source="/TAS.Client.Common;component/Images/EventActions/force-next.png" />
                </ToggleButton>
                <Button Command="{Binding CommandRescheduleSelected}" ToolTip="{Resx _toolbar.Reschedule}">
                    <controls:AutoGreyableImage Source="/TAS.Client.Common;component/Images/Actions/undo.png" Stretch="None" />
                </Button>
                <ComboBox Margin="2" SelectedIndex="0" Grid.Column="0" Padding="5" >
                    <ComboBoxItem ToolTip="{Resx _toolbar.ClearAll}" >
                        <Button Command="{Binding CommandClearAll}" Style="{StaticResource controlPanelButtons}">
                            <controls:AutoGreyableImage Source="/TAS.Client.Common;component/Images/EventActions/stop.png" />
                        </Button>
                    </ComboBoxItem>
                    <ComboBoxItem ToolTip="{Resx _toolbar.ClearCG1}" >
                        <Button Command="{Binding CommandClearLayer}" CommandParameter="17" Style="{StaticResource controlPanelButtons}">
                            <controls:AutoGreyableImage Source="/TAS.Client.Common;component/Images/Layers/Layer1.png" />
                        </Button>
                    </ComboBoxItem>
                    <ComboBoxItem ToolTip="{Resx _toolbar.ClearCG2}" >
                        <Button Command="{Binding CommandClearLayer}" CommandParameter="18" Style="{StaticResource controlPanelButtons}">
                            <controls:AutoGreyableImage Source="/TAS.Client.Common;component/Images/Layers/Layer2.png" />
                        </Button>
                    </ComboBoxItem>
                    <ComboBoxItem ToolTip="{Resx _toolbar.ClearCG3}" >
                        <Button Command="{Binding CommandClearLayer}" CommandParameter="19" Style="{StaticResource controlPanelButtons}">
                            <controls:AutoGreyableImage Source="/TAS.Client.Common;component/Images/Layers/Layer3.png" />
                        </Button>
                    </ComboBoxItem>
                    <ComboBoxItem ToolTip="{Resx _toolbar.ClearAnimations}" >
                        <Button Command="{Binding CommandClearLayer}" CommandParameter="26" Style="{StaticResource controlPanelButtons}">
                            <controls:AutoGreyableImage Source="/TAS.Client.Common;component/Images/Layers/LayerA.png" />
                        </Button>
                    </ComboBoxItem>
                    <ComboBoxItem ToolTip="{Resx _toolbar.ClearMixer}" >
                        <Button Command="{Binding CommandClearMixer}" Style="{StaticResource controlPanelButtons}">
                            <controls:AutoGreyableImage Source="/TAS.Client.Common;component/Images/Layers/LayerS.png" />
                        </Button>
                    </ComboBoxItem>
                </ComboBox>
                <StackPanel>
                    <ToggleButton Margin="2" Height="22" IsChecked="{Binding TrackPlayingEvent}" Background="{Binding TrackPlayingEvent, Converter={StaticResource BoolToBrush}, ConverterParameter=LightCoral}" HorizontalContentAlignment="Left" >
                        <StackPanel Orientation="Horizontal">
                            <Image Source="/TAS.Client.Common;component/Images/Actions/go-down.png" />
                            <Label Content="{Resx _toolbar.Track}" />
                        </StackPanel>
                    </ToggleButton>
                </StackPanel>
            </StackPanel>

            <TextBlock Grid.Row="1" FontSize="13" Text="{Binding CurrentTime, StringFormat=d}" />
            <TextBlock Grid.Row="1" FontSize="13" HorizontalAlignment="Right" Text="{Binding CurrentTime, StringFormat=(ddd)}" />
            <TextBlock Grid.Row="2" Text="{Binding CurrentTime, StringFormat=T}" />
            <Label Grid.Column="2" Content="{Resx _toolbar.TimeToAttention}" />
            <TextBlock Grid.Row="1" Grid.Column="2" Text="{Binding TimeToAttention, Converter={StaticResource TimeSpanToSMPTE}, ConverterParameter=HIDE_ZERO_VALUE}" VerticalAlignment="Center" FontSize="22" Margin="5, 0">
                <TextBlock.Style>
                    <Style TargetType="TextBlock">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding EngineState}" Value="Running">
                                <Setter Property="Background" Value="LightPink"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding EngineState}" Value="Hold">
                                <Setter Property="Background" Value="PaleGreen"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </TextBlock.Style>
            </TextBlock>
            <Label Grid.Column="3" Content="{Resx _toolbar.NowPlaying}"  />
            <TextBlock Grid.Row="1" Grid.Column="3" Text="{Binding PlayingEventName}">
                <TextBlock.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="{Resx _toolbar.playingEventName.Menu.Restart, ResxName=TAS.Client.Views.EngineView}" Command="{Binding CommandRestartLayer}" CommandParameter="16"/>
                    </ContextMenu>
                </TextBlock.ContextMenu>
            </TextBlock>
            <Label Grid.Row="2" Grid.Column="3" Content="{Resx _toolbar.Next}"  />
            <TextBlock Grid.Row="3" Grid.Column="3" Text="{Binding NextToPlay}"/>
            <Label Grid.Row="2" Grid.Column="2" Content="{Resx _toolbar.NextWithRequestedStartTime}"/>
            <TextBlock Grid.Row="3" Grid.Column="2" Text="{Binding NextWithRequestedStartTime.Offset, Converter={StaticResource TimeSpanToSignedString}}">
                <TextBlock.ToolTip>
                    <Run Text="{Binding NextWithRequestedStartTime.EventName}"/>
                </TextBlock.ToolTip>
            </TextBlock>
            <DockPanel Grid.Column="4" Grid.RowSpan="4">
                <CheckBox DockPanel.Dock="Top" Visibility="{Binding IsInterlacedFormat, Converter={StaticResource BoolToVis}}" Content="{Resx _toolbar.FieldOrderInverted}" ToolTip="{Resx _toolbar.FieldOrderInverted.ToolTip}" IsChecked="{Binding FieldOrderInverted}" IsEnabled="{Binding IsPlayingMovie}"/>
                <Label DockPanel.Dock="Top" Content="Audio"/>
                <Grid DockPanel.Dock="Top">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition/>
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>
                    <Slider Orientation="Vertical" Value="{Binding ProgramAudioVolume}" Minimum="-15" Maximum="15"/>
                    <StackPanel Grid.Column="1">
                        <Label Content="dB" HorizontalAlignment="Center"/>
                        <TextBox Text="{Binding ProgramAudioVolume, StringFormat={}{0:0.0}}" Margin="4, 8"/>
                    </StackPanel>
                </Grid>
            </DockPanel>
        </Grid>
        <StatusBar Name="sbChannelStatus" VerticalAlignment="Bottom" Grid.Row="3">
            <StatusBar.Resources>
                <Style TargetType="CheckBox">
                    <Setter Property="VerticalAlignment" Value="Center"/>
                </Style>
                <Style TargetType="Label">
                    <Setter Property="VerticalAlignment" Value="Center"/>
                </Style>
                <Style TargetType="common:StatusIndicator">
                    <Setter Property="VerticalAlignment" Value="Center"/>
                    <Setter Property="Height" Value="14"/>
                </Style>
                <Style TargetType="TextBlock">
                    <Setter Property="Margin" Value="5,0"/>
                    <Setter Property="VerticalAlignment" Value="Center"/>
                </Style>
            </StatusBar.Resources>
            <StatusBarItem>
                <StackPanel Orientation="Horizontal" >
                    <controls:AutoGreyableImage Source="/TAS.Client.Common;component/Images/Indicators/on-air.png" Visibility="{Binding CGControllerExists, Converter={StaticResource BoolToVis}}" IsEnabled="{Binding CGControllerIsMaster}" />
                    <Menu Height="22" Margin="5, 0" VerticalAlignment="Center" >
                        <MenuItem Margin="0" Padding="0" Height="{Binding ActualHeight, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Menu}}}" >
                            <MenuItem.Header>
                                <StackPanel Orientation="Horizontal">
                                    <common:StatusIndicator IsGreen="{Binding NoAlarms}" Height="15"/>
                                    <TextBlock>
                                        <TextBlock.Text>
                                            <Binding Path="NoAlarms">
                                                <Binding.Converter>
                                                    <common:BoolToStringConverter FalseValue="{Resx _statusbar.Indicator.Alarm, ResxName=TAS.Client.Views.EngineView}" TrueValue="{Resx _statusbar.Indicator.NoAlarms, ResxName=TAS.Client.Views.EngineView}" />
                                                </Binding.Converter>
                                            </Binding>
                                        </TextBlock.Text>
                                    </TextBlock>
                                </StackPanel>
                            </MenuItem.Header>
                            <StackPanel>
                                <StackPanel Margin="2" Orientation="Horizontal" Visibility="{Binding ServerPRIExists, Converter={StaticResource BoolToVis}}">
                                    <common:StatusIndicator IsGreen="{Binding ServerConnectedPRI}"/>
                                    <TextBlock>
                                        <TextBlock.Text>
                                            <Binding Path="ServerConnectedPRI">
                                                <Binding.Converter>
                                                    <common:BoolToStringConverter FalseValue="{Resx _statusbar.Indicator.PRIDisconnected, ResxName=TAS.Client.Views.EngineView}" TrueValue="{Resx _statusbar.Indicator.PRIConnected, ResxName=TAS.Client.Views.EngineView}" />
                                                </Binding.Converter>
                                            </Binding>
                                        </TextBlock.Text>
                                    </TextBlock>
                                </StackPanel>
                                <StackPanel Margin="2" Orientation="Horizontal" Visibility="{Binding ServerSECExists, Converter={StaticResource BoolToVis}}">
                                    <common:StatusIndicator IsGreen="{Binding ServerConnectedSEC}"/>
                                    <TextBlock>
                                        <TextBlock.Text>
                                            <Binding Path="ServerConnectedSEC">
                                                <Binding.Converter>
                                                    <common:BoolToStringConverter FalseValue="{Resx _statusbar.Indicator.SECDisconnected, ResxName=TAS.Client.Views.EngineView}" TrueValue="{Resx _statusbar.Indicator.SECConnected, ResxName=TAS.Client.Views.EngineView}" />
                                                </Binding.Converter>
                                            </Binding>
                                        </TextBlock.Text>
                                    </TextBlock>
                                </StackPanel>
                                <StackPanel Margin="2" Orientation="Horizontal" Visibility="{Binding ServerPRVExists, Converter={StaticResource BoolToVis}}">
                                    <common:StatusIndicator IsGreen="{Binding ServerConnectedPRV}"/>
                                    <TextBlock>
                                        <TextBlock.Text>
                                            <Binding Path="ServerConnectedPRV">
                                                <Binding.Converter>
                                                    <common:BoolToStringConverter FalseValue="{Resx _statusbar.Indicator.PRVDisconnected, ResxName=TAS.Client.Views.EngineView}" TrueValue="{Resx _statusbar.Indicator.PRVConnected, ResxName=TAS.Client.Views.EngineView}" />
                                                </Binding.Converter>
                                            </Binding>
                                        </TextBlock.Text>
                                    </TextBlock>
                                </StackPanel>
                                <StackPanel Margin="2" Orientation="Horizontal">
                                    <common:StatusIndicator IsGreen="{Binding DatabaseOK}"/>
                                    <TextBlock>
                                        <TextBlock.Text>
                                            <Binding Path="DatabaseOK">
                                                <Binding.Converter>
                                                    <common:BoolToStringConverter FalseValue="{Resx _statusbar.Indicator.DatabaseError, ResxName=TAS.Client.Views.EngineView}" TrueValue="{Resx _statusbar.Indicator.DatabaseOK, ResxName=TAS.Client.Views.EngineView}" />
                                                </Binding.Converter>
                                            </Binding>
                                        </TextBlock.Text>
                                    </TextBlock>
                                </StackPanel>
                            </StackPanel>
                        </MenuItem>
                    </Menu>
                    <ContentControl Content="{Binding CGElementsControllerViewmodel}">
                        <ContentControl.Resources>
                            <DataTemplate DataType="{x:Type vievmodels:EngineCGElementsControllerViewmodel}">
                                <views:EngineCGElementsControllerView />
                            </DataTemplate>
                        </ContentControl.Resources>
                    </ContentControl>
                </StackPanel>
            </StatusBarItem>
            <StatusBarItem TextBlock.FontSize="13" HorizontalAlignment="Right" Panel.ZIndex="1" Background="{Binding Path=Background, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type StatusBar}}}">
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="{Binding Path=SelectedCount, StringFormat={Resx _statusbar.Selected, ResxName=TAS.Client.Views.EngineView}}" VerticalAlignment="Center"/>
                    <TextBlock Text="{Resx _statusbar.Total}"/>
                    <TextBlock Text="{Binding SelectedTime, Converter={StaticResource TimeSpanToSMPTE}}" VerticalAlignment="Center" />
                </StackPanel>
            </StatusBarItem>
        </StatusBar>
        <Grid Grid.Row="2">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="350" />
            </Grid.ColumnDefinitions>
            <!--<TabControl TabStripPlacement="Left" BorderThickness="0" >
                <TabControl.Resources>
                    <Style TargetType="{x:Type TabItem}">
                        <Setter Property="HeaderTemplate">
                            <Setter.Value>
                                <DataTemplate>
                                    <ContentPresenter Content="{TemplateBinding Content}">
                                        <ContentPresenter.LayoutTransform>
                                            <RotateTransform Angle="270" />
                                        </ContentPresenter.LayoutTransform>
                                    </ContentPresenter>
                                </DataTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </TabControl.Resources>
                <TabItem Padding="0, 20" Header="{Resx _tabs.Rundowns}">-->
            <DockPanel>
                <Grid Height="25" DockPanel.Dock="Bottom" Visibility="{Binding IsSearchPanelVisible, Converter={StaticResource BoolToVis}}">
                    <StackPanel Orientation="Horizontal" >
                        <Label Content="{Resx _search.SearchFor}" VerticalAlignment="Center" Margin="5, 0" Padding="0"/>
                        <controls:SearchTextBox Text="{Binding SearchText, UpdateSourceTrigger=PropertyChanged}" Prompt="{Resx _search.EnterTextToSearch}" Width="250" VerticalAlignment="Stretch" VerticalContentAlignment="Center" Command="{Binding CommandSearchDo}" ButtonToolTip="{Resx _search.Search.ToolTip}" SearchMode="Regular">
                            <i:Interaction.Behaviors>
                                <common:FocusExtension IsFocused="{Binding IsSearchBoxFocused}"/>
                            </i:Interaction.Behaviors>
                        </controls:SearchTextBox>
                        <TextBlock Text="{Resx _search.NotFound}" Visibility="{Binding IsSearchNotFound, Converter={StaticResource BoolToVis}}" Foreground="{DynamicResource {x:Static SystemColors.InactiveCaptionBrushKey}}" VerticalAlignment="Center"/>
                    </StackPanel>
                    <Button Style="{StaticResource ClearButton}" HorizontalAlignment="Right" Margin="2, 0" Command="{Binding CommandSearchHidePanel}" IsCancel="True" ToolTip="{Resx _search.Close.ToolTip}"/>
                </Grid>
                <TreeView common:TreeViewExtensions.EnableMultiSelect="True" 
                      common:TreeViewExtensions.MultiSelectedItems="{Binding MultiSelectedEvents}" 
                      ItemsSource="{Binding RootEventViewModel.Childrens}" 
                      Background="{x:Null}" 
                      >
                    <TreeView.ItemContainerStyle>
                        <Style TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource {x:Type TreeViewItem}}">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="TreeViewItem">
                                        <Grid MaxWidth="{Binding Path=ActualWidth, RelativeSource={RelativeSource TemplatedParent}}">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto" MinWidth="20" />
                                                <ColumnDefinition Width="*" />
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto" />
                                                <RowDefinition />
                                            </Grid.RowDefinitions>
                                            <ToggleButton IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press" Name="Expander">
                                                <ToggleButton.Style>
                                                    <Style TargetType="ToggleButton">
                                                        <Setter Property="UIElement.Focusable" Value="false" />
                                                        <Setter Property="FrameworkElement.Width" Value="20" />
                                                        <Setter Property="FrameworkElement.Height" Value="24" />
                                                        <Setter Property="Control.Template">
                                                            <Setter.Value>
                                                                <ControlTemplate TargetType="ToggleButton">
                                                                    <Border Background="#00FFFFFF" Width="20" Height="24" >
                                                                        <Path Fill="#00FFFFFF" Stroke="#FF4D4D4D" Name="ExpandPath">
                                                                            <Path.Data>
                                                                                <PathGeometry Figures="M0,0L0,13L13,0z" />
                                                                            </Path.Data>
                                                                            <Path.RenderTransform>
                                                                                <RotateTransform Angle="135" CenterX="6" CenterY="9"/>
                                                                            </Path.RenderTransform>
                                                                        </Path>
                                                                    </Border>
                                                                    <ControlTemplate.Triggers>
                                                                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                                                                            <Setter TargetName="ExpandPath" Property="Shape.Stroke" Value="#FF0E8FFB" />
                                                                        </Trigger>
                                                                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                                                                            <Setter TargetName="ExpandPath" Property="UIElement.RenderTransform">
                                                                                <Setter.Value>
                                                                                    <RotateTransform Angle="180" CenterX="8" CenterY="9" />
                                                                                </Setter.Value>
                                                                            </Setter>
                                                                            <Setter TargetName="ExpandPath" Property="Shape.Fill" Value="#FF0E8FFB" />
                                                                            <Setter TargetName="ExpandPath" Property="Shape.Stroke" Value="#FF0E8FFB" />
                                                                        </Trigger>
                                                                    </ControlTemplate.Triggers>
                                                                </ControlTemplate>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </Style>
                                                </ToggleButton.Style>
                                            </ToggleButton>
                                            <Border x:Name="Bd" BorderThickness="{TemplateBinding Border.BorderThickness}" 
                                        BorderBrush="{TemplateBinding Border.BorderBrush}" 
                                        Padding="{TemplateBinding Control.Padding}" 
                                        Background="{TemplateBinding Panel.Background}" 
                                        SnapsToDevicePixels="True" 
                                        Grid.Column="1">
                                                <ContentPresenter x:Name="PART_Header" 
                                                      Content="{TemplateBinding HeaderedContentControl.Header}" 
                                                      ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}" 
                                                      ContentStringFormat="{TemplateBinding HeaderedItemsControl.HeaderStringFormat}" 
                                                      ContentTemplateSelector="{TemplateBinding HeaderedItemsControl.HeaderTemplateSelector}" 
                                                      ContentSource="Header" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" 
                                                      />
                                            </Border>
                                            <ItemsPresenter x:Name="ItemsHost" Grid.Column="1" Grid.Row="1" />
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="TreeViewItem.IsExpanded" Value="False">
                                                <Setter TargetName="ItemsHost" Property="UIElement.Visibility" Value="Collapsed" />
                                            </Trigger>
                                            <Trigger Property="ItemsControl.HasItems" Value="False">
                                                <Setter TargetName="Expander" Property="UIElement.Visibility" Value="Hidden" />
                                            </Trigger>
                                            <Trigger Property="TreeViewItem.IsSelected" Value="True">
                                                <Setter TargetName="Bd" Property="Panel.Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                                                <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                                            </Trigger>
                                            <Trigger Property="UIElement.IsEnabled" Value="False">
                                                <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
                            <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
                            <Setter Property="Visibility" Value="{Binding IsVisible, Mode=TwoWay, Converter={StaticResource BoolToVis}}"/>
                            <Setter Property="common:TreeViewExtensions.IsMultiSelected" Value="{Binding IsMultiSelected, Mode=OneWayToSource}"/>
                            <Setter Property="Margin" Value="0"/>
                            <Style.Triggers>
                                <Trigger Property="common:TreeViewExtensions.IsMultiSelected"  Value="True" >
                                    <Setter Property="Background" Value="LightSkyBlue"></Setter>
                                </Trigger>
                                <!--<Trigger Property="Visibility" Value="Collapsed">
                                <Setter Property="common:TreeViewExtensions.IsSelected" Value="False"/>
                            </Trigger>-->
                            </Style.Triggers>
                        </Style>
                    </TreeView.ItemContainerStyle>
                <TreeView.Resources>
                    <HierarchicalDataTemplate ItemsSource="{Binding Childrens}" DataType="{x:Type vievmodels:EventPanelMovieViewmodel}" >
                        <views:EventPanelMovieView />
                    </HierarchicalDataTemplate>
                    <HierarchicalDataTemplate ItemsSource="{Binding Childrens}" DataType="{x:Type vievmodels:EventPanelLiveViewmodel}" >
                        <views:EventPanelLiveView />
                    </HierarchicalDataTemplate>
                    <HierarchicalDataTemplate ItemsSource="{Binding Childrens}" DataType="{x:Type vievmodels:EventPanelContainerViewmodel}" >
                        <views:EventPanelContainerView />
                    </HierarchicalDataTemplate>
                    <HierarchicalDataTemplate ItemsSource="{Binding Childrens}" DataType="{x:Type vievmodels:EventPanelRundownViewmodel}" >
                        <views:EventPanelRundownView />
                    </HierarchicalDataTemplate>
                    <DataTemplate DataType="{x:Type vievmodels:EventPanelStillViewmodel}" >
                        <views:EventPanelStillView />
                    </DataTemplate>
                    <DataTemplate DataType="{x:Type vievmodels:EventPanelAnimationViewmodel}" >
                        <views:EventPanelAnimationView />
                    </DataTemplate>
                    <DataTemplate DataType="{x:Type vievmodels:EventPanelCommandScriptViewmodel}" >
                        <views:EventPanelCommandScriptView />
                    </DataTemplate>
                </TreeView.Resources>
            </TreeView>
            </DockPanel>
            <!--</TabItem>
                <TabItem Padding="0, 20" Header="{Resx _tabs.State}">
                    <Border BorderThickness="2" BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}">
                    </Border>
                </TabItem>
            </TabControl>-->
            <GridSplitter Grid.Column="0" ResizeDirection="Columns" HorizontalAlignment="Right" Background="DarkGray" Width="3" Cursor="SizeWE"/>
            <Grid Grid.Column="1">
                <Grid.RowDefinitions>
                    <RowDefinition Height="*" MinHeight="50"/>
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <ContentControl Content="{Binding EventEditView}"/>
                <GridSplitter Visibility="{Binding PreviewView, Converter={StaticResource NullToVis}}" Grid.Row="1" HorizontalAlignment="Stretch" VerticalAlignment="Top" Background="DarkGray" Height="3" Cursor="SizeNS"/>
                <ContentControl Grid.Row="1" Margin="3, 3, 0, 0"  Content="{Binding PreviewView}"/>
            </Grid>
        </Grid>
    </Grid>

</UserControl>
